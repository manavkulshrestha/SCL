import pickle

import pybullet as p
import pybullet_data

import os.path as osp
import time
from itertools import zip_longest

from matplotlib import pyplot as plt
from toposort import toposort

import torch
from torch_geometric.data import Data
import numpy as np
from scipy.spatial.transform import Rotation as R

from Datasets.dutility import get_alldataloaders, ADPATH, get_scenesdataloader
from Generation.gen_lib import simulate_scene_pc, Camera, PBObjectLoader
from dataset_analysis import condition
from nn.Network import ObjectNet, DNet
from robot.robot import UR5
from rp import setup_basic, dep_dict, scene_graph, dep_graph, remove_objects
from utility import load_model, dist_q, dist_e, jaccard, mean, quat_angle, tid_name, visualize, make_pcd, tid_colors, \
    std


def setup_field_fromdata(node_ids, oid_tid, poss, orns, slow=False):
    """ takes the goal poss and orns and lays out the involved objects in a grid on the plane """
    y_range = [0.2, 0.5]
    x_range = [.2, -.2]
    loader = PBObjectLoader('Generation/urdfc')

    num_objs = len(node_ids)
    g_oids = np.array(sorted(list(oid_tid.keys())))

    idx = 0
    for xpos in np.linspace(*x_range, 5):
        for ypos in np.linspace(*y_range, 5):
            if idx >= num_objs:
                break

            oid = g_oids[idx]
            typ = tid_name(oid_tid[oid])
            pos, orn = poss[idx], orns[idx]

            # modify orn on xy plane
            # rot = R.from_rotvec([0, 0, np.random.uniform(-np.pi/4, np.pi/4)])
            # new_orn = (rot * R.from_quat(orn)).as_quat()
            new_orn = orn

            c_oid = loader.load_obj(otype=typ, pos=(xpos, ypos, 0.01), quat=new_orn, wait=100, slow=slow)
            p.changeDynamics(c_oid, -1, mass=0.05)
            idx += 1

    return loader, g_oids


def get_target_pose(idx, poss, orns):
    return poss[idx], orns[idx]


def fix_object(object_id):
    constraint_id = p.createConstraint(
        parentBodyUniqueId=-1,
        parentLinkIndex=-1,
        childBodyUniqueId=object_id,
        childLinkIndex=-1,
        jointType=p.JOINT_FIXED,
        jointAxis=(0, 0, 0),
        parentFramePosition=(0, 0, 0),
        childFramePosition=(0, 0, 0),
    )
    return constraint_id


def sim_step():
    p.stepSimulation()



def rearrangement_metrics(moved_idx, curr_state, g_poss, g_orns):
    pos_err, orn_err, ora_err = [], [], []
    for obj_idx in moved_idx:
        c_oid = curr_state.obj_ids[obj_idx]

        g_pos, g_orn = g_poss[obj_idx], g_orns[obj_idx]
        c_pos, c_orn = p.getBasePositionAndOrientation(c_oid)

        pos_err.append(dist_e(c_pos, g_pos))
        orn_err.append(dist_q(c_orn, g_orn))

        qa = quat_angle(c_orn, g_orn) % 2*np.pi
        qa = min(qa, 2*np.pi - qa)
        ora_err.append(qa)

    # report metrics
    pos_err = np.array(pos_err)
    orn_err = np.array(orn_err)
    ora_err = np.array(ora_err)
    # print(pos_err)
    # print(orn_err)
    orn_err /= np.sqrt(2)

    # print(f'pos error: {np.mean(pos_err):.4f}+/-{np.std(pos_err):.4f}, max: {np.max(pos_err):.4f}, min: {np.min(pos_err):.4f}')
    # print(f'orn error: {np.mean(orn_err):.4f}+/-{np.std(orn_err):.4f}, max: {np.max(orn_err):.4f}, min: {np.min(orn_err):.4f}')
    # print(f'ora error: {np.mean(ora_err):.4f}+/-{np.std(ora_err):.4f}, max: {np.max(ora_err):.4f}, min: {np.min(ora_err):.4f}')
    # print(f'planning time: {planning_time:.6f} (dependence graph) and {withsorting_time:.6f} (with sorting)')

    return {
        'pos_err': pos_err, 'pos_mean': np.mean(pos_err), 'pos_std': np.std(pos_err), 'pos_min': np.min(pos_err), 'pos_max': np.max(pos_err),
        'orn_err': orn_err, 'orn_mean': np.mean(orn_err), 'orn_std': np.std(orn_err), 'orn_min': np.min(orn_err), 'orn_max': np.max(orn_err),
        'ora_err': ora_err, 'ora_mean': np.mean(ora_err), 'ora_std': np.std(ora_err), 'ora_min': np.min(ora_err), 'ora_max': np.max(ora_err),
    }


def planning(node_graph, dep_net, dep_g):
    # infer scene structure/planning
    start = time.time()
    pred_graph = scene_graph(node_graph, dep_model=dep_net)  # TODO add adaptation to reduce threshold
    inference_time = time.time() - start
    pred_layers = list(toposort(dep_dict(pred_graph)))
    planning_time = time.time() - start
    gt_graph = dep_g

    # get jaccard similarity of layers # list(toposort(dep_dict(gt_graph)))
    gt_layers = list(toposort(dep_dict(gt_graph)))
    layer_jaccards = [jaccard(gt_l, pr_l) for gt_l, pr_l in zip_longest(list(gt_layers), list(pred_layers),
                                                                        fillvalue=set())]
    mean_jaccard = mean(layer_jaccards)

    return pred_layers, {
        'inference_time': inference_time,
        'planning_time': planning_time,
        'layer_jaccards': layer_jaccards,
        'mean_jaccard': mean_jaccard,
        'pred_graph': pred_graph,
        'gt_graph': gt_graph,
        'graphs_equal': (gt_graph == pred_graph).all(),
        'plan': pred_layers
    }


def close(c_pos, c_orn, g_pos, g_orn, p_thres=0.01, o_thres=0.1):
    pos_close = dist_e(c_pos, g_pos) < p_thres
    orn_close = dist_q(c_orn, g_orn, normalized=True) < o_thres
    return pos_close and orn_close


def sim_offset_adjustment(o_id, g_pos, g_orn):
    p.resetBasePositionAndOrientation(o_id, g_pos, g_orn)


def rearrangement(robot, pred_layers, curr_state, poss, orns, timeout=300000, control_fix=False):
    start_time = time.time()

    moved_idx = []
    for l_num, layer in enumerate(pred_layers):
        for obj_idx in layer:
            moved_idx.append(obj_idx)
            c_oid = curr_state.obj_ids[obj_idx]

            # in real, position obtained from point-cloud and orientation from TEASER++
            c_pos_cen, c_orn = p.getBasePositionAndOrientation(c_oid)
            g_pos_cen, g_orn = get_target_pose(obj_idx, poss, orns)
            c_pos = np.array(c_pos_cen)  # get_suc_point(c_pcds, c_oids, c_oid)
            g_pos_cen = np.array(g_pos_cen)

            # obtain goal orientation
            g_orn_to = p.getDifferenceQuaternion(c_orn, g_orn)  # in real, done with TEASER++

            # move above cur position, move to curr, pick, move above curr
            robot.move_ee_above(c_pos, orn=(0, 0, 0, 1), above_offt=(0, 0, 0.2))
            robot.move_ee_above(c_pos, orn=(0, 0, 0, 1), above_offt=(0, 0, 0.05))
            c_pos_from, _ = robot.move_ee_down(c_pos, orn=(0, 0, 0, 1))
            robot.suction(True)
            robot.move_ee_above(c_pos, orn=(0, 0, 0, 1))

            # obtain goal pose
            succ_offt = np.subtract(c_pos_from, c_pos_cen)
            g_orn_mat = R.from_quat(g_orn_to).as_matrix()
            rotated_succ_offt = g_orn_mat @ succ_offt
            g_pos_to = g_pos_cen + rotated_succ_offt

            # move above goal position, move to goal, drop, move above goal
            robot.move_ee_above(g_pos_to, orn=g_orn_to)
            robot.move_ee(g_pos_to + [0, 0, 0.003], orn=g_orn_to)

            for _ in range(100):  # block has inertia from the robot moving
                p.stepSimulation()

            robot.suction(False)
            p.changeDynamics(c_oid, -1, mass=0.00001)

            if control_fix:  # and close(*p.getBasePositionAndOrientation(c_oid), g_pos_cen, g_orn):
                sim_offset_adjustment(c_oid, g_pos_cen, g_orn)

            for _ in range(500):
                p.stepSimulation()

            robot.move_ee_above(g_pos_cen, orn=(0, 0, 0, 1))
            xl_num = min(2, l_num)
            p.changeDynamics(c_oid, -1, mass=[0.5, 0.02, 0.01][xl_num])
            # fix_object(c_oid)
            if (time.time() - start_time) > timeout:
                return False, moved_idx, rearrangement_metrics(moved_idx, curr_state, poss, orns)

    return True, moved_idx, rearrangement_metrics(moved_idx, curr_state, poss, orns)


def setup_env(oid_tid, node_ids, poss, orns, headless=False):
    # add plane and camera and stuff
    setup_basic(headless=headless)

    # set up workspace for rearrangement
    curr_state, g_oids = setup_field_fromdata(node_ids, oid_tid, poss, orns)
    robot = UR5([-0.5, 0, 0])
    for _ in range(100):
        p.stepSimulation()

    return robot, curr_state, g_oids


def recreate_scene(scene_num):
    scene_name = f'{scene_num // 1000}_{scene_num % 1000}.npz'
    all_path = osp.join(ADPATH, scene_name)

    all_file = np.load(all_path)
    to_extract = ['pc', 'oid', 'tid', 'depg', 'pos', 'orn', 'node_ids']
    pcds, o_ids, t_ids, dep_g, g_poss, g_orns, node_ids = [all_file[x] for x in to_extract]

    setup_basic()
    loader = PBObjectLoader('Generation/urdfc')
    oid_tid = dict(zip(o_ids, t_ids.astype(int)))

    visualize(make_pcd(pcds, tid_colors(t_ids)))

    for g_oid, g_pos, g_orn in zip(np.unique(o_ids).astype(int), g_poss, g_orns):
        tid = oid_tid[g_oid]
        typ = tid_name(tid)
        loader.load_obj(typ, g_pos, g_orn)

    return loader


def main(val_set, bounds):
    # load models
    feat_net = load_model(ObjectNet, 'cn_test_best_model.pt')
    feat_net.eval()

    dep_net = load_model(DNet, 'dnT_best_model_95_nn.pt',
                         model_args=[511, 256, 128], model_kwargs={'heads': 16, 'concat': False})
    dep_net.eval()

    results = []
    success_p_thresh, success_o_thresh = 0.005, 0.01

    # what scenes to test on
    l_bound, u_bound = bounds
    data_count = 100
    # 0-10
    # valid_is = {5, 18, 22, 35, 47, 71, 80, 112, 116, 123, 130, 147, 166, 194, 223, 237, 249, 259, 290, 299, 301, 314, 340, 347, 358, 365, 371, 386, 389, 391, 405, 409, 410, 425, 427, 443, 472, 510, 523, 543, 550, 551, 570, 579, 586, 615, 663, 670, 713, 715, 717, 733, 744, 757, 761, 769, 775, 806, 808, 809, 858, 884, 930, 932, 939, 944, 952, 967, 994, 995, 1002, 1003, 1004, 1011, 1015, 1016, 1021, 1030, 1039, 1041, 1045, 1048, 1060, 1064, 1071, 1089, 1091, 1112, 1115, 1124, 1127, 1134, 1149, 1156, 1160, 1175, 1179, 1181, 1184, 1204, 1210, 1213, 1217, 1223, 1231, 1242, 1300, 1333, 1380, 1381, 1383, 1384, 1401, 1440, 1442, 1453, 1454, 1461, 1465, 1466, 1472, 1525, 1555, 1561, 1567, 1577, 1590, 1592, 1594, 1600, 1608, 1627, 1655, 1690, 1702, 1711, 1715, 1722, 1726, 1753, 1758, 1763, 1791, 1797, 1816, 1819, 1846, 1854, 1861, 1880, 1892, 1895, 1903, 1904, 1906, 1907, 1911, 1975, 1991, 1995, 2008, 2011, 2014, 2023, 2040, 2113, 2144, 2152, 2162, 2170, 2173, 2187, 2194, 2199, 2229, 2243, 2244, 2246, 2257, 2259, 2263, 2272, 2276, 2318, 2330, 2334, 2336, 2343, 2353, 2368, 2374, 2400, 2413, 2439, 2445, 2448, 2468, 2472, 2487, 2523, 2536, 2538, 2548, 2549, 2550, 2594, 2602, 2643, 2646, 2659, 2667, 2678, 2679, 2680, 2688, 2700, 2701, 2721, 2734, 2764, 2777, 2790, 2808, 2856, 2868, 2869, 2878, 2895, 2905, 2908, 2910, 2919, 2959, 2972, 2990, 3010, 3043, 3049, 3057, 3077, 3103, 3109, 3157, 3175, 3190, 3207, 3210, 3238, 3254, 3265, 3281, 3282, 3304, 3314, 3320, 3326, 3353, 3368, 3370, 3378, 3390, 3391, 3400, 3407, 3420, 3426, 3441, 3449, 3458, 3472, 3483, 3490, 3499, 3523, 3540, 3550, 3555, 3561, 3569, 3576, 3598, 3600, 3605, 3607, 3628, 3645, 3668, 3671, 3676, 3687, 3706, 3707, 3710, 3712, 3721, 3742, 3743, 3760, 3766, 3817, 3822, 3828, 3831, 3851, 3876, 3898, 3920, 3921, 3932, 3963, 3964, 3983, 3985, 3987, 3988, 4031, 4049, 4053, 4057, 4065, 4071, 4114, 4137, 4158, 4164, 4206, 4212, 4220, 4234, 4241, 4251, 4277, 4379, 4391, 4400, 4442, 4479, 4489, 4505, 4520, 4524, 4543, 4546, 4555, 4563, 4572, 4587, 4622, 4630, 4636, 4648, 4665, 4671, 4679, 4680, 4742, 4771, 4800, 4827, 4831, 4851, 4861, 4884, 4887, 4925, 4950, 4955, 4976, 4980, 4984, 4996, 5022, 5080, 5088, 5124, 5162, 5164, 5165, 5170, 5184, 5200, 5211, 5214, 5223, 5244, 5259, 5261, 5276, 5277, 5284, 5291, 5347, 5360, 5369, 5373, 5374, 5381, 5416, 5422, 5450, 5461, 5471, 5492, 5497, 5498, 5519, 5520, 5521, 5526, 5539, 5555, 5570, 5571, 5604, 5624, 5644, 5654, 5689, 5697, 5716, 5725, 5763, 5767, 5771, 5777, 5793, 5811, 5849, 5850, 5855, 5864, 5888, 5891, 5894, 5924, 5926, 5934, 5957, 5960, 5963, 5984, 6010, 6026, 6027, 6050, 6055, 6091, 6095, 6112, 6116, 6124, 6130, 6132, 6135, 6142, 6151, 6153, 6157, 6181, 6196, 6216, 6234, 6248, 6269, 6271, 6278, 6287, 6293, 6294, 6312, 6330, 6337, 6348, 6366, 6383, 6392, 6396, 6421, 6422, 6453, 6459, 6486, 6497, 6508, 6510, 6516, 6524, 6539, 6543, 6544, 6557, 6558, 6565, 6611, 6641, 6671, 6685, 6699, 6736, 6756, 6779, 6836, 6837, 6845, 6901, 6904, 6924, 6947, 6949, 6950, 6953, 6963, 7008, 7035, 7047, 7051, 7062, 7067, 7103, 7105, 7126, 7147, 7162, 7163, 7164, 7170, 7173, 7180, 7185, 7189, 7209, 7212, 7223, 7230, 7243, 7244, 7248, 7274, 7285, 7331, 7353, 7362, 7368, 7370, 7377, 7389, 7395, 7411, 7460, 7479, 7488, 7518, 7524, 7530, 7570, 7586, 7589, 7591, 7594, 7607, 7618, 7629, 7641, 7666, 7681, 7715, 7723, 7743, 7748, 7757, 7772, 7781, 7796, 7806, 7835, 7847, 7853, 7863, 7866, 7882, 7908, 7911, 7912, 7925, 7938, 7943, 7962, 7973, 7977, 7984, 7992, 8002, 8018, 8022, 8037, 8079, 8090, 8114, 8149, 8164, 8181, 8216, 8226, 8236, 8260, 8262, 8266, 8291, 8294, 8303, 8334, 8340, 8354, 8362, 8385, 8431, 8435, 8451, 8458, 8460, 8468, 8473, 8482, 8494, 8504, 8510, 8525, 8542, 8552, 8554, 8562, 8567, 8579, 8589, 8592, 8601, 8608, 8622, 8636, 8637, 8648, 8651, 8667, 8687, 8716, 8728, 8734, 8744, 8758, 8765, 8767, 8788, 8793, 8802, 8814, 8837, 8850, 8851, 8873, 8874, 8919, 8928, 8934, 8940, 8944, 8957, 8963, 8970, 9010, 9026, 9033, 9043, 9064, 9118, 9135, 9141, 9151, 9177, 9179, 9191, 9193, 9196, 9237, 9276, 9279, 9283, 9307, 9319, 9361, 9374, 9396, 9424, 9443, 9462, 9464, 9479, 9496, 9499, 9501, 9511, 9516, 9518, 9529, 9560, 9586, 9587, 9597, 9618, 9621, 9633, 9681, 9686, 9691, 9728, 9762, 9776, 9787, 9811, 9820, 9830, 9834, 9852, 9868, 9895, 9906, 9917, 9924, 9941, 9954, 9956}

    # 10-15
    # valid_is = {0, 2, 3, 4, 8, 9, 11, 13, 16, 17, 19, 20, 21, 23, 24, 26, 27, 31, 32, 33, 34, 37, 38, 39, 40, 41, 50, 52, 53, 55, 62, 63, 65, 67, 68, 70, 75, 76, 77, 78, 83, 87, 88, 90, 91, 94, 96, 100, 101, 102, 104, 106, 107, 109, 110, 111, 118, 122, 124, 125, 128, 131, 132, 133, 134, 138, 139, 140, 144, 149, 152, 153, 157, 158, 160, 161, 170, 171, 173, 175, 177, 184, 185, 190, 191, 195, 197, 199, 200, 201, 203, 204, 205, 208, 209, 210, 214, 218, 221, 225, 229, 233, 234, 239, 240, 244, 246, 247, 248, 251, 252, 253, 255, 258, 263, 265, 268, 275, 278, 282, 285, 291, 293, 310, 311, 315, 318, 320, 321, 322, 323, 325, 326, 330, 342, 344, 349, 350, 351, 352, 357, 361, 364, 369, 373, 374, 375, 376, 379, 380, 383, 384, 387, 388, 393, 397, 399, 403, 408, 411, 412, 413, 415, 419, 423, 424, 429, 431, 432, 433, 434, 435, 437, 440, 441, 444, 447, 450, 455, 456, 457, 459, 460, 463, 465, 467, 473, 474, 476, 477, 478, 479, 480, 481, 482, 489, 495, 496, 497, 499, 500, 505, 506, 518, 520, 521, 526, 530, 532, 533, 536, 539, 540, 541, 545, 549, 554, 556, 557, 558, 561, 563, 564, 566, 572, 576, 578, 581, 582, 583, 588, 589, 595, 599, 600, 602, 610, 613, 614, 616, 617, 619, 621, 623, 626, 628, 632, 634, 635, 637, 638, 642, 646, 647, 648, 650, 652, 653, 654, 658, 662, 665, 666, 672, 673, 676, 677, 678, 679, 680, 682, 683, 684, 685, 690, 691, 692, 694, 701, 703, 704, 709, 710, 711, 712, 718, 720, 721, 727, 730, 734, 736, 737, 738, 740, 742, 745, 746, 747, 748, 750, 752, 753, 755, 764, 768, 771, 772, 776, 778, 779, 782, 784, 785, 788, 789, 792, 795, 798, 799, 801, 802, 803, 804, 805, 807, 811, 818, 819, 822, 824, 834, 836, 838, 839, 841, 842, 843, 846, 848, 850, 855, 857, 859, 860, 862, 865, 868, 869, 871, 872, 873, 874, 875, 877, 880, 883, 885, 889, 890, 893, 898, 901, 902, 908, 909, 913, 914, 915, 919, 920, 922, 923, 924, 927, 928, 929, 931, 938, 940, 945, 946, 951, 953, 954, 963, 964, 968, 969, 971, 974, 975, 976, 983, 984, 985, 986, 988, 992, 996, 999, 1000, 1005, 1006, 1008, 1009, 1012, 1013, 1017, 1019, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1033, 1042, 1043, 1050, 1053, 1057, 1059, 1062, 1065, 1066, 1067, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1087, 1092, 1105, 1110, 1114, 1119, 1120, 1123, 1126, 1128, 1130, 1137, 1141, 1144, 1145, 1150, 1151, 1153, 1162, 1163, 1165, 1167, 1169, 1171, 1173, 1174, 1176, 1182, 1183, 1186, 1187, 1190, 1191, 1192, 1193, 1196, 1197, 1200, 1201, 1203, 1205, 1208, 1211, 1220, 1222, 1224, 1225, 1226, 1228, 1233, 1234, 1238, 1239, 1241, 1244, 1246, 1253, 1255, 1256, 1257, 1258, 1261, 1262, 1264, 1266, 1273, 1274, 1278, 1281, 1287, 1290, 1291, 1293, 1295, 1297, 1298, 1302, 1304, 1306, 1307, 1309, 1310, 1311, 1313, 1316, 1321, 1322, 1323, 1324, 1325, 1329, 1330, 1332, 1334, 1342, 1343, 1344, 1346, 1347, 1351, 1353, 1355, 1357, 1358, 1360, 1361, 1370, 1372, 1376, 1385, 1388, 1390, 1392, 1393, 1398, 1399, 1408, 1409, 1411, 1412, 1415, 1417, 1418, 1420, 1422, 1425, 1426, 1427, 1428, 1430, 1431, 1433, 1439, 1444, 1445, 1446, 1447, 1449, 1451, 1456, 1457, 1459, 1460, 1463, 1467, 1468, 1469, 1470, 1471, 1478, 1484, 1490, 1491, 1495, 1498, 1500, 1501, 1502, 1505, 1506, 1508, 1510, 1511, 1518, 1520, 1521, 1528, 1532, 1534, 1535, 1543, 1547, 1548, 1549, 1550, 1553, 1556, 1557, 1568, 1569, 1570, 1575, 1576, 1580, 1581, 1582, 1583, 1584, 1587, 1589, 1591, 1596, 1598, 1599, 1606, 1615, 1616, 1622, 1626, 1628, 1631, 1633, 1637, 1638, 1639, 1640, 1643, 1644, 1647, 1653, 1654, 1657, 1659, 1660, 1664, 1668, 1673, 1682, 1686, 1688, 1689, 1691, 1697, 1698, 1699, 1700, 1703, 1704, 1706, 1709, 1713, 1716, 1720, 1731, 1733, 1736, 1737, 1744, 1747, 1750, 1752, 1754, 1755, 1757, 1765, 1768, 1770, 1771, 1776, 1778, 1779, 1781, 1783, 1785, 1787, 1788, 1789, 1793, 1794, 1796, 1799, 1802, 1803, 1808, 1809, 1812, 1813, 1817, 1820, 1822, 1824, 1826, 1831, 1834, 1835, 1836, 1838, 1844, 1845, 1847, 1849, 1856, 1857, 1860, 1864, 1865, 1866, 1868, 1869, 1872, 1875, 1877, 1882, 1885, 1886, 1887, 1891, 1894, 1896, 1901, 1902, 1905, 1912, 1913, 1920, 1923, 1924, 1928, 1929, 1936, 1939, 1940, 1945, 1951, 1955, 1960, 1963, 1964, 1968, 1971, 1973, 1976, 1978, 1982, 1983, 1984, 1988, 1989, 1993, 1994, 1996, 1998, 2000, 2001, 2003, 2005, 2006, 2007, 2017, 2018, 2019, 2021, 2022, 2027, 2028, 2030, 2032, 2034, 2035, 2044, 2046, 2047, 2049, 2050, 2053, 2054, 2055, 2058, 2059, 2060, 2061, 2062, 2069, 2072, 2077, 2081, 2086, 2091, 2093, 2094, 2099, 2100, 2101, 2104, 2109, 2111, 2112, 2117, 2120, 2121, 2124, 2125, 2129, 2131, 2133, 2135, 2141, 2143, 2145, 2146, 2147, 2148, 2149, 2151, 2153, 2156, 2158, 2159, 2161, 2164, 2165, 2166, 2167, 2168, 2169, 2171, 2172, 2179, 2180, 2181, 2182, 2183, 2185, 2186, 2191, 2197, 2198, 2200, 2201, 2204, 2205, 2210, 2214, 2217, 2220, 2221, 2222, 2228, 2230, 2231, 2238, 2239, 2247, 2248, 2250, 2253, 2254, 2255, 2258, 2261, 2264, 2271, 2274, 2281, 2288, 2289, 2290, 2291, 2292, 2294, 2295, 2297, 2298, 2299, 2300, 2302, 2303, 2304, 2305, 2306, 2310, 2311, 2312, 2313, 2316, 2317, 2322, 2323, 2324, 2326, 2329, 2332, 2335, 2338, 2342, 2346, 2347, 2350, 2351, 2352, 2356, 2357, 2358, 2359, 2360, 2362, 2363, 2364, 2365, 2367, 2371, 2373, 2375, 2379, 2380, 2388, 2391, 2393, 2397, 2398, 2399, 2404, 2405, 2406, 2410, 2411, 2412, 2419, 2420, 2421, 2422, 2423, 2424, 2427, 2428, 2431, 2432, 2435, 2436, 2437, 2440, 2443, 2446, 2450, 2451, 2452, 2453, 2456, 2458, 2461, 2462, 2463, 2464, 2465, 2470, 2471, 2473, 2474, 2479, 2480, 2481, 2482, 2483, 2486, 2490, 2491, 2492, 2493, 2494, 2495, 2498, 2511, 2512, 2513, 2519, 2525, 2527, 2529, 2530, 2531, 2532, 2535, 2539}

    valid_is = val_set

    # load data and do experiments
    _, _, test_loader = get_scenesdataloader(feat_net)
    count = 0
    print('done loading')
    total_successes = 0
    total_completions = 0
    for i, data in enumerate(test_loader):
        # if not condition(data, l_bound, u_bound):
        #     continue
        # if i not in [1134, 472, 490, 523, 570, 858, 1045, 1048, 1134]: # 570 setup issue, 1045 pred issue.
        #     continue
        if i not in valid_is:
            continue
        count += 1
        if count >= data_count:
            break

        try:
            robot, initial_state, g_oids = setup_env(data.oid_tid[0][0], data.node_ids[0],
                                                     data.g_poss[0], data.g_orns[0], headless=True)

            robot.move_timestep = 0
            pred_layers, p_metrics = planning(data, dep_net, data.adj_mat[0])
            timeout, moved_idx, r_metrics = rearrangement(robot, pred_layers, initial_state, data.g_poss[0], data.g_orns[0],
                                                          control_fix=True)

            p.disconnect()
        except TypeError as e:
            count -= 1
            continue

        # save/print metrics for scene
        p_s = r_metrics['pos_err'] < success_p_thresh
        o_s = r_metrics['orn_err'] < success_o_thresh
        completion = p_s & o_s

        com, suc = completion.mean(), completion.all()

        result = {'moved_idx': moved_idx,
                  **p_metrics, **r_metrics,
                  'num_nodes': len(data.adj_mat[0]),
                  'completion': com,
                  'success': suc,
                  'data_num': count,
                  'data_idx': i}
        print(result)
        print(f'[{count}]({i}) success: {suc}, completion: {com}')
        results.append(result)

        total_completions += com
        total_successes += suc

        print(f'#Objects in this: {len(moved_idx)}')

        print(f'Total success rate: {total_successes/count * 100}')
        print(f'Total completion rate: {total_completions/count * 100}')

    # save/rpint all metrics
    success_rate = mean([r['success'] for r in results])
    completion_rate = mean([r['completion'] for r in results])

    avg_pos_mean = mean([r['pos_mean'] for r in results if r['success']])
    avg_pos_std = mean([r['pos_std'] for r in results if r['success']])
    avg_orn_mean = mean([r['orn_mean'] for r in results if r['success']])
    avg_orn_std = mean([r['orn_std'] for r in results if r['success']])

    avg_pred_time = mean([r['inference_time'] for r in results])
    avg_plan_time = mean([r['planning_time'] for r in results])
    avg_mean_jacc = mean([r['mean_jaccard'] for r in results])

    std_pred_time = std([r['inference_time'] for r in results])
    std_plan_time = std([r['planning_time'] for r in results])
    std_mean_jacc = std([r['mean_jaccard'] for r in results])

    print('\n\n[FINAL METRICS]')
    print(f'success rate: {success_rate}, completion rate: {completion_rate}\n')

    print(f'mean position error:\t\t{avg_pos_mean}+/-{avg_pos_std} (m)')
    print(f'mean orientation error:\t\t{avg_orn_mean}+/-{avg_orn_std} (0-1)')
    print(f'structure inference time:\t{avg_pred_time}+/-{std_pred_time} (s)')
    print(f'mean planning time\t\t\t{avg_plan_time}+/-{std_plan_time} (s)')
    print(f'averaged mean jaccard\t\t{avg_mean_jacc}+/-{std_mean_jacc}')

    tt = int(time.time())
    with open(f'results/results_{count}_{l_bound}-{u_bound}_{tt}', 'wb') as f:
        pickle.dump(results, f)

    with open(f'results/summary_{count}_{l_bound}-{u_bound}_{tt}', 'w') as f:
        print('\n\n[FINAL METRICS]', file=f)
        print(f'success rate: {success_rate}, completion rate: {completion_rate}\n', file=f)

        print(f'mean position error:\t\t{avg_pos_mean}+/-{avg_pos_std} (m)', file=f)
        print(f'mean orientation error:\t\t{avg_orn_mean}+/-{avg_orn_std} (0-1)', file=f)
        print(f'structure inference time:\t{avg_pred_time}+/-{std_pred_time} (s)', file=f)
        print(f'mean planning time\t\t\t{avg_plan_time}+/-{std_plan_time} (s)', file=f)
        print(f'averaged mean jaccard\t\t{avg_mean_jacc}+/-{std_mean_jacc}', file=f)

    # recreate_scene(9000)
    # time.sleep(10000)


if __name__ == '__main__':
    is_valid_0_10 = {5, 18, 22, 35, 47, 71, 80, 112, 116, 123, 130, 147, 166, 194, 223, 237, 249, 259, 290, 299, 301, 314, 340, 347, 358, 365, 371, 386, 389, 391, 405, 409, 410, 425, 427, 443, 472, 510, 523, 543, 550, 551, 570, 579, 586, 615, 663, 670, 713, 715, 717, 733, 744, 757, 761, 769, 775, 806, 808, 809, 858, 884, 930, 932, 939, 944, 952, 967, 994, 995, 1002, 1003, 1004, 1011, 1015, 1016, 1021, 1030, 1039, 1041, 1045, 1048, 1060, 1064, 1071, 1089, 1091, 1112, 1115, 1124, 1127, 1134, 1149, 1156, 1160, 1175, 1179, 1181, 1184, 1204, 1210, 1213, 1217, 1223, 1231, 1242, 1300, 1333, 1380, 1381, 1383, 1384, 1401, 1440, 1442, 1453, 1454, 1461, 1465, 1466, 1472, 1525, 1555, 1561, 1567, 1577, 1590, 1592, 1594, 1600, 1608, 1627, 1655, 1690, 1702, 1711, 1715, 1722, 1726, 1753, 1758, 1763, 1791, 1797, 1816, 1819, 1846, 1854, 1861, 1880, 1892, 1895, 1903, 1904, 1906, 1907, 1911, 1975, 1991, 1995, 2008, 2011, 2014, 2023, 2040, 2113, 2144, 2152, 2162, 2170, 2173, 2187, 2194, 2199, 2229, 2243, 2244, 2246, 2257, 2259, 2263, 2272, 2276, 2318, 2330, 2334, 2336, 2343, 2353, 2368, 2374, 2400, 2413, 2439, 2445, 2448, 2468, 2472, 2487, 2523, 2536, 2538, 2548, 2549, 2550, 2594, 2602, 2643, 2646, 2659, 2667, 2678, 2679, 2680, 2688, 2700, 2701, 2721, 2734, 2764, 2777, 2790, 2808, 2856, 2868, 2869, 2878, 2895, 2905, 2908, 2910, 2919, 2959, 2972, 2990, 3010, 3043, 3049, 3057, 3077, 3103, 3109, 3157, 3175, 3190, 3207, 3210, 3238, 3254, 3265, 3281, 3282, 3304, 3314, 3320, 3326, 3353, 3368, 3370, 3378, 3390, 3391, 3400, 3407, 3420, 3426, 3441, 3449, 3458, 3472, 3483, 3490, 3499, 3523, 3540, 3550, 3555, 3561, 3569, 3576, 3598, 3600, 3605, 3607, 3628, 3645, 3668, 3671, 3676, 3687, 3706, 3707, 3710, 3712, 3721, 3742, 3743, 3760, 3766, 3817, 3822, 3828, 3831, 3851, 3876, 3898, 3920, 3921, 3932, 3963, 3964, 3983, 3985, 3987, 3988, 4031, 4049, 4053, 4057, 4065, 4071, 4114, 4137, 4158, 4164, 4206, 4212, 4220, 4234, 4241, 4251, 4277, 4379, 4391, 4400, 4442, 4479, 4489, 4505, 4520, 4524, 4543, 4546, 4555, 4563, 4572, 4587, 4622, 4630, 4636, 4648, 4665, 4671, 4679, 4680, 4742, 4771, 4800, 4827, 4831, 4851, 4861, 4884, 4887, 4925, 4950, 4955, 4976, 4980, 4984, 4996, 5022, 5080, 5088, 5124, 5162, 5164, 5165, 5170, 5184, 5200, 5211, 5214, 5223, 5244, 5259, 5261, 5276, 5277, 5284, 5291, 5347, 5360, 5369, 5373, 5374, 5381, 5416, 5422, 5450, 5461, 5471, 5492, 5497, 5498, 5519, 5520, 5521, 5526, 5539, 5555, 5570, 5571, 5604, 5624, 5644, 5654, 5689, 5697, 5716, 5725, 5763, 5767, 5771, 5777, 5793, 5811, 5849, 5850, 5855, 5864, 5888, 5891, 5894, 5924, 5926, 5934, 5957, 5960, 5963, 5984, 6010, 6026, 6027, 6050, 6055, 6091, 6095, 6112, 6116, 6124, 6130, 6132, 6135, 6142, 6151, 6153, 6157, 6181, 6196, 6216, 6234, 6248, 6269, 6271, 6278, 6287, 6293, 6294, 6312, 6330, 6337, 6348, 6366, 6383, 6392, 6396, 6421, 6422, 6453, 6459, 6486, 6497, 6508, 6510, 6516, 6524, 6539, 6543, 6544, 6557, 6558, 6565, 6611, 6641, 6671, 6685, 6699, 6736, 6756, 6779, 6836, 6837, 6845, 6901, 6904, 6924, 6947, 6949, 6950, 6953, 6963, 7008, 7035, 7047, 7051, 7062, 7067, 7103, 7105, 7126, 7147, 7162, 7163, 7164, 7170, 7173, 7180, 7185, 7189, 7209, 7212, 7223, 7230, 7243, 7244, 7248, 7274, 7285, 7331, 7353, 7362, 7368, 7370, 7377, 7389, 7395, 7411, 7460, 7479, 7488, 7518, 7524, 7530, 7570, 7586, 7589, 7591, 7594, 7607, 7618, 7629, 7641, 7666, 7681, 7715, 7723, 7743, 7748, 7757, 7772, 7781, 7796, 7806, 7835, 7847, 7853, 7863, 7866, 7882, 7908, 7911, 7912, 7925, 7938, 7943, 7962, 7973, 7977, 7984, 7992, 8002, 8018, 8022, 8037, 8079, 8090, 8114, 8149, 8164, 8181, 8216, 8226, 8236, 8260, 8262, 8266, 8291, 8294, 8303, 8334, 8340, 8354, 8362, 8385, 8431, 8435, 8451, 8458, 8460, 8468, 8473, 8482, 8494, 8504, 8510, 8525, 8542, 8552, 8554, 8562, 8567, 8579, 8589, 8592, 8601, 8608, 8622, 8636, 8637, 8648, 8651, 8667, 8687, 8716, 8728, 8734, 8744, 8758, 8765, 8767, 8788, 8793, 8802, 8814, 8837, 8850, 8851, 8873, 8874, 8919, 8928, 8934, 8940, 8944, 8957, 8963, 8970, 9010, 9026, 9033, 9043, 9064, 9118, 9135, 9141, 9151, 9177, 9179, 9191, 9193, 9196, 9237, 9276, 9279, 9283, 9307, 9319, 9361, 9374, 9396, 9424, 9443, 9462, 9464, 9479, 9496, 9499, 9501, 9511, 9516, 9518, 9529, 9560, 9586, 9587, 9597, 9618, 9621, 9633, 9681, 9686, 9691, 9728, 9762, 9776, 9787, 9811, 9820, 9830, 9834, 9852, 9868, 9895, 9906, 9917, 9924, 9941, 9954, 9956}
    is_valid_10_15 = {0, 2, 3, 4, 8, 9, 11, 13, 16, 17, 19, 20, 21, 23, 24, 26, 27, 31, 32, 33, 34, 37, 38, 39, 40, 41, 50, 52, 53, 55, 62, 63, 65, 67, 68, 70, 75, 76, 77, 78, 83, 87, 88, 90, 91, 94, 96, 100, 101, 102, 104, 106, 107, 109, 110, 111, 118, 122, 124, 125, 128, 131, 132, 133, 134, 138, 139, 140, 144, 149, 152, 153, 157, 158, 160, 161, 170, 171, 173, 175, 177, 184, 185, 190, 191, 195, 197, 199, 200, 201, 203, 204, 205, 208, 209, 210, 214, 218, 221, 225, 229, 233, 234, 239, 240, 244, 246, 247, 248, 251, 252, 253, 255, 258, 263, 265, 268, 275, 278, 282, 285, 291, 293, 310, 311, 315, 318, 320, 321, 322, 323, 325, 326, 330, 342, 344, 349, 350, 351, 352, 357, 361, 364, 369, 373, 374, 375, 376, 379, 380, 383, 384, 387, 388, 393, 397, 399, 403, 408, 411, 412, 413, 415, 419, 423, 424, 429, 431, 432, 433, 434, 435, 437, 440, 441, 444, 447, 450, 455, 456, 457, 459, 460, 463, 465, 467, 473, 474, 476, 477, 478, 479, 480, 481, 482, 489, 495, 496, 497, 499, 500, 505, 506, 518, 520, 521, 526, 530, 532, 533, 536, 539, 540, 541, 545, 549, 554, 556, 557, 558, 561, 563, 564, 566, 572, 576, 578, 581, 582, 583, 588, 589, 595, 599, 600, 602, 610, 613, 614, 616, 617, 619, 621, 623, 626, 628, 632, 634, 635, 637, 638, 642, 646, 647, 648, 650, 652, 653, 654, 658, 662, 665, 666, 672, 673, 676, 677, 678, 679, 680, 682, 683, 684, 685, 690, 691, 692, 694, 701, 703, 704, 709, 710, 711, 712, 718, 720, 721, 727, 730, 734, 736, 737, 738, 740, 742, 745, 746, 747, 748, 750, 752, 753, 755, 764, 768, 771, 772, 776, 778, 779, 782, 784, 785, 788, 789, 792, 795, 798, 799, 801, 802, 803, 804, 805, 807, 811, 818, 819, 822, 824, 834, 836, 838, 839, 841, 842, 843, 846, 848, 850, 855, 857, 859, 860, 862, 865, 868, 869, 871, 872, 873, 874, 875, 877, 880, 883, 885, 889, 890, 893, 898, 901, 902, 908, 909, 913, 914, 915, 919, 920, 922, 923, 924, 927, 928, 929, 931, 938, 940, 945, 946, 951, 953, 954, 963, 964, 968, 969, 971, 974, 975, 976, 983, 984, 985, 986, 988, 992, 996, 999, 1000, 1005, 1006, 1008, 1009, 1012, 1013, 1017, 1019, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1033, 1042, 1043, 1050, 1053, 1057, 1059, 1062, 1065, 1066, 1067, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1087, 1092, 1105, 1110, 1114, 1119, 1120, 1123, 1126, 1128, 1130, 1137, 1141, 1144, 1145, 1150, 1151, 1153, 1162, 1163, 1165, 1167, 1169, 1171, 1173, 1174, 1176, 1182, 1183, 1186, 1187, 1190, 1191, 1192, 1193, 1196, 1197, 1200, 1201, 1203, 1205, 1208, 1211, 1220, 1222, 1224, 1225, 1226, 1228, 1233, 1234, 1238, 1239, 1241, 1244, 1246, 1253, 1255, 1256, 1257, 1258, 1261, 1262, 1264, 1266, 1273, 1274, 1278, 1281, 1287, 1290, 1291, 1293, 1295, 1297, 1298, 1302, 1304, 1306, 1307, 1309, 1310, 1311, 1313, 1316, 1321, 1322, 1323, 1324, 1325, 1329, 1330, 1332, 1334, 1342, 1343, 1344, 1346, 1347, 1351, 1353, 1355, 1357, 1358, 1360, 1361, 1370, 1372, 1376, 1385, 1388, 1390, 1392, 1393, 1398, 1399, 1408, 1409, 1411, 1412, 1415, 1417, 1418, 1420, 1422, 1425, 1426, 1427, 1428, 1430, 1431, 1433, 1439, 1444, 1445, 1446, 1447, 1449, 1451, 1456, 1457, 1459, 1460, 1463, 1467, 1468, 1469, 1470, 1471, 1478, 1484, 1490, 1491, 1495, 1498, 1500, 1501, 1502, 1505, 1506, 1508, 1510, 1511, 1518, 1520, 1521, 1528, 1532, 1534, 1535, 1543, 1547, 1548, 1549, 1550, 1553, 1556, 1557, 1568, 1569, 1570, 1575, 1576, 1580, 1581, 1582, 1583, 1584, 1587, 1589, 1591, 1596, 1598, 1599, 1606, 1615, 1616, 1622, 1626, 1628, 1631, 1633, 1637, 1638, 1639, 1640, 1643, 1644, 1647, 1653, 1654, 1657, 1659, 1660, 1664, 1668, 1673, 1682, 1686, 1688, 1689, 1691, 1697, 1698, 1699, 1700, 1703, 1704, 1706, 1709, 1713, 1716, 1720, 1731, 1733, 1736, 1737, 1744, 1747, 1750, 1752, 1754, 1755, 1757, 1765, 1768, 1770, 1771, 1776, 1778, 1779, 1781, 1783, 1785, 1787, 1788, 1789, 1793, 1794, 1796, 1799, 1802, 1803, 1808, 1809, 1812, 1813, 1817, 1820, 1822, 1824, 1826, 1831, 1834, 1835, 1836, 1838, 1844, 1845, 1847, 1849, 1856, 1857, 1860, 1864, 1865, 1866, 1868, 1869, 1872, 1875, 1877, 1882, 1885, 1886, 1887, 1891, 1894, 1896, 1901, 1902, 1905, 1912, 1913, 1920, 1923, 1924, 1928, 1929, 1936, 1939, 1940, 1945, 1951, 1955, 1960, 1963, 1964, 1968, 1971, 1973, 1976, 1978, 1982, 1983, 1984, 1988, 1989, 1993, 1994, 1996, 1998, 2000, 2001, 2003, 2005, 2006, 2007, 2017, 2018, 2019, 2021, 2022, 2027, 2028, 2030, 2032, 2034, 2035, 2044, 2046, 2047, 2049, 2050, 2053, 2054, 2055, 2058, 2059, 2060, 2061, 2062, 2069, 2072, 2077, 2081, 2086, 2091, 2093, 2094, 2099, 2100, 2101, 2104, 2109, 2111, 2112, 2117, 2120, 2121, 2124, 2125, 2129, 2131, 2133, 2135, 2141, 2143, 2145, 2146, 2147, 2148, 2149, 2151, 2153, 2156, 2158, 2159, 2161, 2164, 2165, 2166, 2167, 2168, 2169, 2171, 2172, 2179, 2180, 2181, 2182, 2183, 2185, 2186, 2191, 2197, 2198, 2200, 2201, 2204, 2205, 2210, 2214, 2217, 2220, 2221, 2222, 2228, 2230, 2231, 2238, 2239, 2247, 2248, 2250, 2253, 2254, 2255, 2258, 2261, 2264, 2271, 2274, 2281, 2288, 2289, 2290, 2291, 2292, 2294, 2295, 2297, 2298, 2299, 2300, 2302, 2303, 2304, 2305, 2306, 2310, 2311, 2312, 2313, 2316, 2317, 2322, 2323, 2324, 2326, 2329, 2332, 2335, 2338, 2342, 2346, 2347, 2350, 2351, 2352, 2356, 2357, 2358, 2359, 2360, 2362, 2363, 2364, 2365, 2367, 2371, 2373, 2375, 2379, 2380, 2388, 2391, 2393, 2397, 2398, 2399, 2404, 2405, 2406, 2410, 2411, 2412, 2419, 2420, 2421, 2422, 2423, 2424, 2427, 2428, 2431, 2432, 2435, 2436, 2437, 2440, 2443, 2446, 2450, 2451, 2452, 2453, 2456, 2458, 2461, 2462, 2463, 2464, 2465, 2470, 2471, 2473, 2474, 2479, 2480, 2481, 2482, 2483, 2486, 2490, 2491, 2492, 2493, 2494, 2495, 2498, 2511, 2512, 2513, 2519, 2525, 2527, 2529, 2530, 2531, 2532, 2535, 2539}
    is_valid_15_20 = {1, 7, 12, 14, 28, 30, 42, 44, 45, 56, 58, 59, 60, 61, 66, 72, 73, 81, 84, 85, 89, 92, 95, 97, 98, 99, 103, 105, 113, 115, 119, 120, 121, 127, 135, 136, 142, 151, 154, 155, 163, 164, 165, 167, 172, 176, 178, 179, 182, 183, 188, 189, 192, 193, 196, 198, 206, 212, 215, 216, 219, 220, 224, 227, 228, 236, 238, 242, 243, 257, 260, 262, 269, 270, 271, 272, 280, 281, 283, 284, 287, 292, 294, 295, 296, 298, 300, 303, 305, 316, 317, 324, 327, 331, 333, 334, 335, 336, 339, 343, 345, 354, 355, 359, 366, 368, 370, 372, 377, 378, 381, 382, 385, 400, 401, 402, 404, 406, 414, 416, 418, 422, 426, 428, 430, 438, 439, 442, 446, 448, 449, 452, 453, 454, 461, 462, 464, 466, 468, 469, 470, 475, 483, 486, 488, 491, 493, 498, 501, 502, 503, 507, 513, 514, 519, 524, 527, 531, 537, 542, 546, 547, 548, 553, 562, 567, 568, 571, 574, 577, 580, 585, 587, 590, 591, 597, 598, 601, 603, 604, 605, 606, 611, 624, 627, 629, 630, 636, 639, 641, 644, 645, 649, 655, 656, 660, 661, 675, 681, 686, 687, 696, 697, 698, 705, 706, 708, 716, 719, 722, 723, 726, 729, 741, 743, 749, 754, 756, 759, 762, 765, 767, 773, 774, 780, 781, 783, 786, 787, 791, 793, 794, 796, 800, 810, 812, 813, 815, 823, 825, 829, 830, 831, 832, 840, 844, 849, 856, 863, 864, 866, 870, 879, 887, 888, 894, 895, 896, 899, 900, 904, 905, 906, 907, 916, 921, 926, 933, 934, 935, 936, 937, 941, 942, 948, 949, 950, 955, 956, 958, 959, 965, 966, 970, 972, 977, 978, 980, 990, 993, 998, 1007, 1010, 1014, 1018, 1024, 1031, 1034, 1035, 1037, 1038, 1040, 1046, 1054, 1055, 1058, 1061, 1063, 1068, 1069, 1070, 1073, 1082, 1083, 1088, 1090, 1094, 1095, 1096, 1099, 1101, 1102, 1103, 1106, 1108, 1113, 1116, 1118, 1122, 1125, 1129, 1131, 1133, 1136, 1139, 1140, 1142, 1143, 1146, 1152, 1154, 1157, 1158, 1159, 1161, 1164, 1168, 1170, 1172, 1177, 1188, 1199, 1202, 1207, 1209, 1212, 1215, 1218, 1235, 1236, 1240, 1248, 1249, 1254, 1267, 1268, 1270, 1275, 1279, 1283, 1285, 1288, 1296, 1301, 1305, 1308, 1314, 1320, 1327, 1328, 1339, 1340, 1341, 1349, 1350, 1354, 1362, 1364, 1365, 1367, 1368, 1369, 1373, 1377, 1378, 1382, 1386, 1387, 1389, 1394, 1395, 1397, 1402, 1403, 1407, 1423, 1424, 1434, 1437, 1441, 1448, 1462, 1473, 1475, 1477, 1479, 1480, 1481, 1482, 1485, 1489, 1493, 1497, 1504, 1507, 1513, 1515, 1519, 1522, 1526, 1530, 1538, 1539, 1540, 1541, 1542, 1544, 1545, 1546, 1551, 1554, 1558, 1559, 1560, 1563, 1566, 1572, 1573, 1574, 1578, 1579, 1593, 1597, 1601, 1603, 1604, 1607, 1610, 1614, 1617, 1619, 1621, 1629, 1632, 1634, 1635, 1646, 1648, 1649, 1658, 1661, 1662, 1663, 1665, 1666, 1669, 1674, 1675, 1678, 1679, 1680, 1681, 1683, 1684, 1685, 1692, 1693, 1707, 1708, 1714, 1718, 1721, 1723, 1724, 1727, 1728, 1729, 1734, 1738, 1739, 1740, 1742, 1743, 1746, 1748, 1749, 1751, 1756, 1759, 1761, 1762, 1764, 1766, 1767, 1772, 1774, 1777, 1782, 1790, 1800, 1801, 1804, 1805, 1807, 1810, 1811, 1818, 1821, 1823, 1825, 1827, 1832, 1833, 1840, 1841, 1843, 1852, 1853, 1858, 1859, 1862, 1863, 1867, 1870, 1871, 1876, 1878, 1881, 1883, 1884, 1889, 1893, 1898, 1900, 1908, 1910, 1914, 1916, 1917, 1919, 1921, 1925, 1927, 1931, 1932, 1935, 1937, 1938, 1942, 1946, 1948, 1952, 1953, 1956, 1959, 1961, 1962, 1965, 1966, 1967, 1970, 1974, 1979, 1980, 1981, 1985, 1987, 1990, 1992, 1997, 1999, 2010, 2012, 2013, 2015, 2020, 2024, 2037, 2038, 2041, 2042, 2043, 2051, 2057, 2064, 2065, 2066, 2067, 2073, 2079, 2080, 2082, 2084, 2085, 2090, 2095, 2097, 2102, 2103, 2107, 2110, 2115, 2119, 2122, 2123, 2127, 2128, 2134, 2137, 2140, 2154, 2155, 2160, 2163, 2174, 2175, 2178, 2184, 2188, 2189, 2190, 2192, 2193, 2202, 2203, 2206, 2208, 2212, 2213, 2215, 2218, 2219, 2223, 2225, 2226, 2227, 2232, 2233, 2235, 2236, 2237, 2245, 2249, 2251, 2265, 2266, 2268, 2270, 2273, 2275, 2278, 2282, 2283, 2287, 2301, 2308, 2314, 2320, 2321, 2328, 2331, 2337, 2339, 2349, 2354, 2355, 2366, 2377, 2378, 2382, 2383, 2384, 2386, 2389, 2390, 2392, 2394, 2395, 2396, 2402, 2403, 2407, 2408, 2409, 2414, 2415, 2416, 2417, 2429, 2433, 2442, 2449, 2457, 2460, 2484, 2485, 2488, 2496, 2497, 2501, 2503, 2504, 2506, 2508, 2509, 2510, 2522, 2524, 2542, 2546, 2547, 2552, 2554, 2557, 2559, 2561, 2563, 2564, 2566, 2569, 2572, 2575, 2580, 2582, 2583, 2603, 2607, 2612, 2616, 2621, 2622, 2625, 2626, 2636, 2640, 2642, 2644, 2645, 2649, 2653, 2656, 2657, 2658, 2663, 2675, 2677, 2681, 2696, 2697, 2698, 2702, 2709, 2711, 2719, 2726, 2727, 2735, 2737, 2738, 2742, 2745, 2749, 2752, 2753, 2754, 2761, 2765, 2767, 2771, 2774, 2784, 2785, 2787, 2807, 2812, 2815, 2820, 2824, 2828, 2831, 2834, 2840, 2842, 2844, 2845, 2847, 2851, 2853, 2863, 2870, 2876, 2880, 2883, 2890, 2897, 2909, 2912, 2913, 2916, 2922, 2923, 2927, 2931, 2935, 2944, 2945, 2947, 2948, 2950, 2955, 2966, 2971, 2974, 2975, 2976, 2981, 2983, 2984, 2985, 2989, 2992, 2994, 2998, 2999, 3002, 3003, 3004, 3008, 3012, 3015, 3016, 3019, 3021, 3022, 3023, 3028, 3033, 3038, 3040, 3042, 3045, 3050, 3053, 3058, 3063, 3066, 3070, 3073, 3076, 3083, 3093, 3098, 3104, 3107, 3108, 3110, 3112, 3115, 3118, 3123, 3124, 3125, 3126, 3131, 3135, 3142, 3143, 3149, 3150, 3151, 3158, 3159, 3163, 3165, 3166, 3168, 3170, 3171, 3174, 3177, 3179, 3180, 3185, 3186, 3187, 3191, 3195, 3197, 3203, 3204, 3205, 3206, 3208, 3211, 3213, 3223, 3225, 3228, 3236, 3245, 3251, 3252, 3262, 3268, 3271, 3273, 3275, 3276, 3277, 3279, 3291, 3292, 3293, 3317, 3318, 3329, 3332, 3333, 3334, 3335, 3337, 3338, 3339, 3342, 3346, 3347, 3350, 3351, 3352, 3356, 3357, 3358, 3364, 3373, 3375, 3380, 3385, 3389, 3393, 3395, 3397, 3403, 3404, 3405, 3408, 3410, 3411, 3414, 3415, 3419, 3424, 3427, 3434, 3435, 3440, 3442, 3443, 3448, 3454, 3455, 3462, 3468, 3476, 3477, 3480, 3482, 3484, 3485, 3487, 3491, 3498, 3502, 3503, 3510, 3515, 3519, 3521, 3527, 3530, 3534}
    is_valid_20_25 = {36, 43, 54, 74, 86, 93, 129, 146, 150, 169, 174, 202, 213, 267, 277, 304, 307, 338, 436, 451, 458, 504, 522, 529, 535, 538, 559, 593, 618, 625, 631, 667, 693, 731, 766, 777, 817, 833, 854, 917, 947, 957, 961, 989, 1044, 1049, 1052, 1109, 1132, 1166, 1178, 1194, 1195, 1214, 1219, 1245, 1250, 1252, 1260, 1272, 1277, 1284, 1319, 1331, 1336, 1366, 1410, 1413, 1483, 1499, 1503, 1536, 1537, 1588, 1605, 1611, 1623, 1624, 1636, 1651, 1677, 1694, 1732, 1741, 1760, 1773, 1792, 1795, 1798, 1806, 1842, 1848, 1933, 1941, 1943, 1977, 2009, 2052, 2075, 2106, 2118, 2211, 2241, 2242, 2256, 2260, 2269, 2277, 2307, 2327, 2345, 2348, 2369, 2444, 2459, 2499, 2505, 2507, 2521, 2606, 2687, 2740, 2751, 2804, 2830, 2846, 2850, 2860, 2861, 2864, 2902, 2962, 2968, 2982, 2987, 3041, 3061, 3081, 3090, 3105, 3164, 3217, 3249, 3257, 3274, 3280, 3297, 3299, 3308, 3341, 3344, 3359, 3387, 3460, 3489, 3493, 3494, 3505, 3507, 3533, 3568, 3606, 3610, 3617, 3618, 3657, 3713, 3716, 3718, 3719, 3730, 3746, 3775, 3781, 3795, 3804, 3830, 3846, 3848, 3860, 3915, 3917, 3979, 3984, 4007, 4063, 4077, 4127, 4154, 4155, 4161, 4162, 4163, 4198, 4280, 4307, 4332, 4333, 4392, 4403, 4424, 4447, 4462, 4484, 4514, 4519, 4531, 4549, 4625, 4633, 4658, 4675, 4676, 4682, 4691, 4700, 4712, 4721, 4765, 4783, 4796, 4883, 4894, 4929, 4947, 4960, 5046, 5054, 5115, 5123, 5166, 5173, 5176, 5185, 5193, 5203, 5280, 5289, 5296, 5302, 5316, 5340, 5443, 5457, 5460, 5480, 5502, 5503, 5582, 5625, 5630, 5638, 5645, 5666, 5672, 5680, 5694, 5696, 5704, 5708, 5720, 5723, 5735, 5738, 5740, 5752, 5773, 5775, 5791, 5876, 5889, 5920, 5925, 5955, 5962, 5967, 5968, 6012, 6047, 6063, 6077, 6078, 6088, 6089, 6158, 6176, 6179, 6198, 6201, 6211, 6236, 6276, 6291, 6301, 6399, 6435, 6444, 6509, 6530, 6556, 6561, 6562, 6578, 6588, 6596, 6606, 6614, 6635, 6650, 6677, 6681, 6710, 6717, 6738, 6753, 6768, 6787, 6789, 6823, 6930, 6945, 6957, 7001, 7003, 7017, 7133, 7140, 7149, 7152, 7187, 7200, 7204, 7215, 7233, 7286, 7290, 7314, 7343, 7403, 7443, 7452, 7457, 7485, 7501, 7505, 7559, 7580, 7585, 7593, 7608, 7612, 7649, 7682, 7761, 7817, 7860, 7865, 7867, 7884, 7900, 7903, 7905, 7910, 7934, 8004, 8025, 8034, 8053, 8072, 8086, 8091, 8093, 8117, 8122, 8123, 8190, 8206, 8207, 8208, 8238, 8254, 8259, 8273, 8307, 8364, 8375, 8446, 8454, 8470, 8543, 8558, 8578, 8604, 8610, 8619, 8658, 8718, 8739, 8753, 8769, 8785, 8834, 8849, 8876, 8881, 8883, 8889, 8930, 8950, 8964, 8990, 8995, 9024, 9126, 9147, 9156, 9174, 9183, 9309, 9322, 9329, 9343, 9347, 9362, 9377, 9406, 9419, 9483, 9495, 9522, 9543, 9599, 9640, 9644, 9648, 9669, 9672, 9709, 9711, 9724, 9764, 9823, 9851, 9858, 9912, 9928, 9929, 9933, 9948, 9964}

    sl_st = 1
    val_sets = [is_valid_0_10, is_valid_10_15, is_valid_15_20, is_valid_20_25]
    all_bounds = [(0, 10), (10, 15), (15, 20), (20, 25)]
    for val_set, bounds in zip(val_sets, all_bounds):
        main(val_set, bounds)
    # main(val_sets[0], all_bounds[0])
